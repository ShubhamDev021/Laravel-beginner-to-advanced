--------------------------------------------------------------------------------------------------------------------------
Pre-requisites
1. XAMPP
2. Composer
3. NodeJS
4. GIT

---------------------------------------------------------------------------------
Installation Via Composer
1. To install latest version
    composer create-project laravel/laravel project_name

2. To install specific version
    composer create-project laravel/laravel:^9.0 project_name

Installation via Laravel installer
composer global require laravel/installer
laravel new project_name

--------------------------------------------------------------------------------------------------------------------------
Setup GIT Repository

git init
Then, setup username and email for GIT i.e git config user.name "username" and git config user.email "email"
git status
git add .
git commit -m "My first commit"
git remote add origin https://github.com/ShubhamDev021/Laravel-beginner-to-advanced.git
git push origin master

--------------------------------------------------------------------------------------------------------------------------
Change hosted port number for application

Go to: vendor/laravel/framework/src/Illuminate/Foundation/Console/ServeCommand.php
In function definition of port(), change the line $port = $port ?: 8000; to $port = $port ?: {desired_port_number};
i.e $port = $port ?: 9000;

--------------------------------------------------------------------------------------------------------------------------
What is closure?

Function without name is known as closure
Ex: 
Route::get('/', function () {
    return view('welcome');
});
Here function() is known as closure

--------------------------------------------------------------------------------------------------------------------------
How to show the list of all the routes of laravel application?

For all the routes- php artisan route:list
For all the developer's created routes(i.e. except vendor's route)- php artisan route:list --except-vendor

--------------------------------------------------------------------------------------------------------------------------
How to clear view's and route's cache?

php artisan view:clear
php artisan route:clear

--------------------------------------------------------------------------------------------------------------------------
How to create a controller?

php artisan make:controller controller_name

Conventions: 
1. Controller name should be in Pascal Case syntax i.e. UserController
2. Controller name should be singular i.e. UserController not UsersController

--------------------------------------------------------------------------------------------------------------------------
How to create a resource controller?

php artisan make:controller controller_name --resource
This controller automatically creates various methods such as index(), create(), store(), show(), edit(), update() and destroy()

We create route of a resource controller as Route::resource('/url', controller_name::class);
We can see the created routes by this resource route using php artisan route:list --except-vendor
This route automatically creates various methods such as 
GET-posts ....................................................................... posts.index › PostController@index  
POST-posts ...................................................................... posts.store › PostController@store  
GET-posts/create ................................................................ posts.create › PostController@create  
GET-posts/{post} ................................................................ posts.show › PostController@show  
PUT|PATCH-posts/{post} .......................................................... posts.update › PostController@update  
DELETE-posts/{post} ............................................................. posts.destroy › PostController@destroy  
GET-posts/{post}/edit ........................................................... posts.edit › PostController@edit  

--------------------------------------------------------------------------------------------------------------------------
Where does database related configurations present?

In .env file database, redis, mail etc related configurations are kept

--------------------------------------------------------------------------------------------------------------------------
How to create migrations in laravel?

Using artisan command: php artisan make:migration migration_name

Conventions: 
1. Table name should be plural i.e. create_post_table is invalid while create_posts_table is valid
2. To create a table format(create_tablename_table): php artisan make:migration create_posts_table
3. If you want to create table with another name say new_table_name, then pass argument --table=new_table_name
   i.e. php artisan make:migration create_posts_table --table=blog_posts

NOTE: In migration file, there are two methods up() and down()
up() method executes when we perform the migration
down() method executes when we rollback the migration

--------------------------------------------------------------------------------------------------------------------------
How to add a column in existing table?

Method 1: 
Add a line to add a column in existing create_migration file
Then, 
(a). use php artisan migrate:refresh (it rollback all the migrations and then execute migration again)
(b). or php artisan migrate:fresh (it drop all the tables and then execute migration again)

Method 2: 
1. Use php artisan make:migration add_columnname_column_into_table --table=table_name
   i.e. php artisan make:migration add_is_active_column_into_table --table=posts
2. Then, add a line to add a column in new migration file
3. Use php artisan migrate

--------------------------------------------------------------------------------------------------------------------------
How to rollback last batch migrations?

php artisan migrate:rollback

--------------------------------------------------------------------------------------------------------------------------
How to rollback last n migrations?

php artisan migrate:rollback --step=n
i.e. For rollbacking last 2 migrations, use php artisan migrate:rollback --step=2

--------------------------------------------------------------------------------------------------------------------------
How to rollback a specific migration?

php artisan migrate:rollback --path=migration_path
i.e. php artisan migrate:rollback --path=database/migrations/2019_12_14_000001_create_personal_access_tokens_table.php

--------------------------------------------------------------------------------------------------------------------------
How to create a foreign key constraint?

$table->foreignId('user_id')->contrained();
Here user_id is according to syntax i.e. singular of table name (user) and id ('id' column of table 'user')
By the above statement, laravel automatically know that user_id is foreign key linked with 'users' table
Here we can pass 'users' in constrained() i.e. constrained('users') but as we have already followed the laravel conventions, we do not need to add it here

--------------------------------------------------------------------------------------------------------------------------
How to check migration status?

php artisan migrate:status

--------------------------------------------------------------------------------------------------------------------------
How to create a model in laravel?

php artisan make:model Model_Name
i.e. php artisan make:model Post

Conventions: 
Model name should be singular

By default here in above example, this model Post will be linked with table posts. But if we want to link this model with another table then, we can use
In app/Models/Post.php, add this line in class Post
protected $table = 'posts_new';

--------------------------------------------------------------------------------------------------------------------------
How to create a model with migration in laravel?

php artisan make:model Model_Name -m
i.e. php artisan make:model Gallery -m

--------------------------------------------------------------------------------------------------------------------------
How to define primary key in model?

In model file, use
protected $primaryKey = 'column_name';

--------------------------------------------------------------------------------------------------------------------------
How to prevent autoincrement of primary key in model?

In model file, use
public $incrementing = false;

--------------------------------------------------------------------------------------------------------------------------
If you don't want to prefill created_at and updated_at column of table, then use
public $timestamps = false;

--------------------------------------------------------------------------------------------------------------------------
If you want to customize the format of your model's timestamps, set the $dateFormat property on your model as
protected $dateFormat = 'U';

--------------------------------------------------------------------------------------------------------------------------
If you need to customize the names of the columns used to store the timestamps, you may define CREATED_AT and UPDATED_AT constants on your model as

const CREATED_AT = 'creation_date';
const UPDATED_AT = 'updated_date';

--------------------------------------------------------------------------------------------------------------------------
Inserting data using model

NOTE: Before inserting data into a table using model, we must tell model which fields are fillable by model as
protected $fillable = ['id', 'user_id', 'title', 'description', 'is_active'];

--------------------------------------------------------------------------------------------------------------------------
Clear all the cache in laravel

php artisan config:clear
php artisan cache:clear
php artisan route:clear
php artisan view:clear

--------------------------------------------------------------------------------------------------------------------------
Important functions used by model Eloquent in CRUD operation

1. C-create: 
    Post::create([
        'user_id' => 1,
        'title' => 'Laravel 11',
        'description' => 'Laravel 11 is cool',
        'is_active' => true
    ]);

R-read: 
    (1). read all data
    $posts = Post::all();

    (2). read data by ID
    $post = Post::find($id);

    (3). read data using specific condition
    post = Post::where('title', $value)->get();

    (a). AND operation with where() function chaining
    $post = Post::where('title', $value1)
                ->where('is_active', $value2)
                ->get();

    (b). AND operation with single where() function
    $post = Post::where(['title' => $value1, 'is_active' => $value2])
                ->get();

    (c). OR operation
    $post = Post::where('title', $value1)
                ->orwhere('is_active', $value2)
                ->get();

U-update: 
    $post = Post::find($id);
    $post->update([
        'title' => 'Laravel 9.1.2',
        'description' => 'This is new description of laravel 9.1.2'
    ]);

D-delete: 
    $post = Post::find($id);
    $post->delete();

--------------------------------------------------------------------------------------------------------------------------
How to include bootstrap in a project?

Goto https://getbootstrap.com and then click on Documentation and then copy
CSS CDN: <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
and place it in <head>
JS CDN: <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
and place it in bottom <body>

--------------------------------------------------------------------------------------------------------------------------
Why do we need to send CSRF token when submitting data in a laravel application?

CSRF (Cross-Site Request Forgery) token is used to protect against CSRF attacks

--------------------------------------------------------------------------------------------------------------------------
How CSRF token prevents CSRF attacks?

CSRF token is a random, unique token generated for each user session.
Laravel requires that the token is included with every state-changing request (like POST, PUT, PATCH, DELETE).
When a request is received, Laravel checks if the token matches the one stored in the session.
If the token is missing or invalid, the request is rejected.

--------------------------------------------------------------------------------------------------------------------------
How to create a session using Session facade?

Session::put('key', 'value');
i.e.: Session::put('login', 'User logged in successfully');

NOTE: once session is created, it will be created untill it's been deleted

--------------------------------------------------------------------------------------------------------------------------
How to check if session exists using Session facade?

if (Session::has('login')) {
    //session exists
}

--------------------------------------------------------------------------------------------------------------------------
How to delete a particular session using Session facade?

Session::forget('key');
i.e. Session::forget('login');

--------------------------------------------------------------------------------------------------------------------------
How to delete all sessions using Session facade?

Session::flush();

--------------------------------------------------------------------------------------------------------------------------
How to show toastr messages in an application?

Here are the steps to follow:
1. Download Toastr CSS(toastr.min.css) and include it
    i.e. <link rel="stylesheet" href="{{ asset('assets/css/toastr.min.css') }}">
2. Download Toastr JS(toastr.min.js) and include it
    i.e. <script src="{{ asset('assets/js/toastr.min.js') }}"></script>
3. Include Toastr Jquery(toastr.min.js)
    i.e. <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
4. Setup toastr options for custom changes
    i.e. <script>
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "60000",
            "extendedTimeOut": "60000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };
    </script>
5. Show message
    i.e. <script>
        toastr["success"]("Sample Toastr message");
    </script>

--------------------------------------------------------------------------------------------------------------------------
How to create a request in laravel?

Using php artisan make:request RequestName
i.e. php artisan make:request PostRequest

Requests are made to keep respective dependable code at a single separate place
In this project we have created a request PostRequest where all the validation code was kept.

--------------------------------------------------------------------------------------------------------------------------
Important functions used by Query builder in CRUD operation

1. C-create: 
    DB::table('posts')
        ->insert([
            'title' => 'My First Post',
            'description' => 'This is the content of my first post.',
            'is_active' => 1,
            'is_published' => 0,
            'deleted_at' => null,
            'created_at' => now(),
            'updated_at' => now(),
        ]);

R-read: 
    (1). read all data
    $posts = DB::table('posts')
            ->get();

    (2). read data by ID
    $post = DB::table('posts')
            ->find($id);

    (3). read data using specific condition
    $post = DB::table('posts')
            ->where('title', $value)
            ->get();

    (a). AND operation with where() function chaining
    $post = DB::table('posts')
            ->where('title', $value1)
            ->where('is_active', $value2)
            ->get();

    (b). AND operation with single where() function
    $post = DB::table('posts')
            ->where([
                'title'     =>  $value1,
                'is_active' =>  $value2
            ])
            ->get();

    (c). OR operation
    $post = DB::table('posts')
            ->where('title', $value1)
            ->orwhere('is_active', $value2)
            ->get();

U-update: 
    $post = DB::table('posts')
            ->where('id', $id)
            ->update([
                'title' => 'Laravel 9',
                'description' => 'This is new description of laravel 9'
            ]);

D-delete: 
    $post = DB::table('posts')
            ->where('id', $id)
            ->delete();

--------------------------------------------------------------------------------------------------------------------------
Why is there a need of SQL raw query execution in query builder?

To prevent SQL injection attack

--------------------------------------------------------------------------------------------------------------------------
Important functions used by Query builder to execute raw SQL queries in CRUD operation

1. C-create: 

    DB::insert('insert into posts (title, description, is_active, is_published, deleted_at, created_at, updated_at) values (?, ?, ?, ?, ?, ?, ?)', ['My Third Post', 'This is the content of my third post.', 0, 1, null, now(), now()]);

    -using-named-bindings
    DB::insert('insert into posts (title, description, is_active, is_published, deleted_at, created_at, updated_at) values (:title, :description, :is_active, :is_published, :deleted_at, :created_at, :updated_at)', ['title' => 'My Third Post', 'description' => 'This is the content of my third post.', 'is_active' => 0, 'is_published' => 1, 'deleted_at' => null, 'created_at' => now(), 'updated_at' => now()]);

R-read: 
    (1). read all data
    $posts = DB::select('select * from posts');

    (2). read data using specific condition
    $post = DB::select('select * from posts where title = ? and is_active = ?', [$value1, $value2]);

    -using-named-bindings
    $post = DB::select('select * from posts where title = :title and is_active = :is_active', ['title' => $value1, 'is_active' => $value2]);

U-update: 
    DB::update('update posts set title = ? and description = ? where id = ?', ['Laravel 9', 'This is new description of laravel 9', $id]);

    -using-named-bindings
    DB::update('update posts set title = :title and description = :description where id = :id', ['title' => 'Laravel 9', 'description' => 'This is new description of laravel 9', 'id' => $id]);

D-delete: 
    DB::delete('delete posts where id = ?', [$id]);

    -using-named-bindings
    DB::delete('delete posts where id = :id', ['id' => $id]);

--------------------------------------------------------------------------------------------------------------------------
What is one to one Eloquent relationship?

One to one relationship states that one entity of table_1 will be related with only one entity of table_2

--------------------------------------------------------------------------------------------------------------------------
How to perform one to one Eloquent relationship?

Please follow below steps:
    1.  Create a foreign key in table ('posts')
        (a).    defining foreign key without foreign key contraint
                $table->integer('user_id');
        (b).    defining foreign key contraint
                $table->foreignId('user_id')->contrained();

    2.  Define a relationship in table_1 ('users')
        In user model (User.php):
        public function post() {
            return $this->hasOne(Post::class, 'user_id', 'id');
        }

        Here we can also write just return $this->hasOne(Post::class); as we have followed the laravel convention that 
        (i).  'id' would be the primary key of 'users' table
        (ii). the column 'user_id' i.e. id column of users table would be foreign key in 'posts' table

    3.  Retrieve data
        $user = User::first();
        return $user->post;

        Here as this is one to one relationship, so we are fetching that single post which is related with this first user
        NOTE: here if multiple posts are created with same user_id then, also we will show only first encountered post

--------------------------------------------------------------------------------------------------------------------------
What is one to one inverse Eloquent relationship?

Getting data of that single entity of table_1 which is related with single entity of table_2

--------------------------------------------------------------------------------------------------------------------------
How to perform one to one inverse Eloquent relationship?

Please follow below steps:
    1.  Create a foreign key in table ('posts')
        discussed earlier

    2.  Define a relationship in table_2 ('posts')
        In post model (Post.php):
        public function user() {
            return $this->belongsTo(User::class, 'user_id', 'id');
            OR
            return $this->belongsTo(User::class);
        }

    3.  Retrieve data
        $post = Post::first();
        return $post->user;

--------------------------------------------------------------------------------------------------------------------------
What is has one through Eloquent relationship?

If table_1 is one to one related with table_2 and table_2 is one to one related with table_3 then, we can get one to one data of table_3 using table_1

--------------------------------------------------------------------------------------------------------------------------
How to perform has one through Eloquent relationship?

Please follow below steps:
    1.  Create a foreign key in tables
        discussed earlier

    2.  Define a relationship in table_1 ('users')
        In user model (User.php):
        public function postComment() {
            return $this->hasOneThrough(Comment::class, Post::class);
        }

    3.  Retrieve data
        $user = User::first();
        return $user->postComment;

--------------------------------------------------------------------------------------------------------------------------
What is one to many Eloquent relationship?

One to many relationship states that one entity of table_1 will be related with many entities of table_2

--------------------------------------------------------------------------------------------------------------------------
How to perform one to many Eloquent relationship?

Please follow below steps:
    1.  Create a foreign key in table ('posts')
        discussed earlier

    2.  Define a relationship in table_1 ('users')
        In user model (User.php):
        public function posts() {
            return $this->hasMany(Post::class, 'user_id', 'id');
            OR
            return $this->hasMany(Post::class);
        }

    3.  Retrieve data
        $user = User::first();
        return $user->posts;

--------------------------------------------------------------------------------------------------------------------------
What is one to many inverse Eloquent relationship?

Getting data of that single entity of table_1 which is related with multiple entities of table_2

--------------------------------------------------------------------------------------------------------------------------
How to perform one to many inverse Eloquent relationship?

Same as one to one inverse
--------------------------------------------------------------------------------------------------------------------------
What is has many through Eloquent relationship?

If table_1 is (one to one)/(one to many) related with table_2 and table_2 is one to many related with table_3 then, we can get one to many data of table_3 using table_1

--------------------------------------------------------------------------------------------------------------------------
How to perform has many through Eloquent relationship?

Please follow below steps:
    1.  Create a foreign key in tables
        discussed earlier

    2.  Define a relationship in table_1 ('users')
        In user model (User.php):
        public function postComments() {
        return $this->hasManyThrough(Comment::class, Post::class);
    }

    3.  Retrieve data
        $user = User::first();
        return $user->postComments;

--------------------------------------------------------------------------------------------------------------------------
What is many to many Eloquent relationship?

Many to many relationship states that many entities of table_1 will be related with many entities of table_2
This relation is established using a pivot table so, whenever we want to establish a many to many relationship, firstly we create a pivot table for that relationship.
Then, we define relation in both the table's model.
Then, we create an entry in pivot table using attach() function. If we want to delete that entry then, we use detach() function.
At last, we retrieve the data.

--------------------------------------------------------------------------------------------------------------------------
How to perform many to many Eloquent relationship?

Please follow below steps:
    1. Create both tables
        discussed earlier (php artisan make:model Role -m)

    2. Create pivot table using migration and set foreign key of both tables here
        php artisan make:migration create_role_user_table --create=role_user

        In migration file,
        Schema::create('role_user', function (Blueprint $table) {
            $table->foreignId('role_id')->constrained();
            $table->foreignId('user_id')->constrained();
        });

        NOTE: here we follow alphabetical order i.e. pivot table name will be post_user not user_post

    3. Define relation
        In user model (User.php):
        public function roles() {
            return $this->belongsToMany(Role::class);
        }

        In role model (Role.php):
        public function users() {
            return $this->belongsToMany(User::class);
        }

    4. Create/Delete entry in pivot table
        $user = User::first();
        $role = Role::first();

        (a). create
        $user->roles()->attach($role);
        (b). delete
        $user->roles()->detach($role);

    5. Retrieve data
        $user = User::first();

        (a). getting roles associated with this user
        return $user->roles;
        (b). getting users associated with this role
        return $role->users;

--------------------------------------------------------------------------------------------------------------------------